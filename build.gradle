import net.darkhax.curseforgegradle.TaskPublishCurseForge

import java.time.OffsetDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id 'net.darkhax.curseforgegradle' version '1.0.10'
}

final var applyPlugins = [
    'eclipse', 'idea',
    'net.minecraftforge.gradle', 'org.parchmentmc.librarian.forgegradle',
    'org.spongepowered.mixin',

    'maven-publish', 'signing', 'io.codearte.nexus-staging'
]
applyPlugins.forEach(pl -> apply plugin: pl)

apply from: 'https://raw.githubusercontent.com/sciwhiz12/Concord/dev/1.18.x/gradle/version.gradle'

def mcVersion = properties.get('mc_version')
def modid = properties.get('mod_id')
version = properties.get('version')
group = 'com.matyrobbrt.sectionprotection' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "$modid-$mcVersion"

sourceSets {
    api {}
}

configurations {
    library
    implementation.extendsFrom(library)

    apiImplementation.extendsFrom(minecraft)
}

mixin {
    add sourceSets.main, "${modid}.refmap.json"
    config "${modid}.mixins.json"
    
    debug.verbose = true
    debug.export = true
}

println "Project Version: $version"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2022.05.02-1.18.2'

    runs {
        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'sectionprotection'
            arg "-mixin.config=${modid}.mixins.json"

            mods {
                sectionprotection {
                    source sourceSets.api
                    source sourceSets.main
                }
            }

            lazyToken('minecraft_classpath') {
                configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        client {
            workingDirectory project.file('run')
            args '--uuid', '5349e1faf20a47cfbd48b7acd2ac8dba'
        }

        server {
            workingDirectory project.file('run')
        }

        gameTestServer {
            workingDirectory project.file('run')
        }

        data {
            workingDirectory project.file('run')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://cursemaven.com' }
    maven { url 'https://jm.gserv.me/repository/maven-snapshots/' }
    mavenCentral()
    //noinspection JCenterRepository
    jcenter()
}

dependencies {
    minecraft "net.minecraftforge:forge:$mcVersion-$forge_version"

    implementation sourceSets.api.output

//    runtimeOnly fg.deobf("curse.maven:jei-238222:3745255")
//    runtimeOnly fg.deobf("curse.maven:flywheel-486392:3737402")
//    runtimeOnly fg.deobf("curse.maven:create-328085:3737418")

    compileOnly 'info.journeymap:journeymap-api:1.18.2-1.9-SNAPSHOT'
    runtimeOnly fg.deobf('curse.maven:journeymap-32274:3796379')

    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

    compileOnly group:'com.google.auto.service', name:'auto-service', version:'1.0.1'
    annotationProcessor group:'com.google.auto.service', name:'auto-service', version:'1.0.1'

    def vcollections = '0.3.3'
    minecraftLibrary "eu.mihosoft.vcollections:vcollections:$vcollections"
    jarJar "eu.mihosoft.vcollections:vcollections:[$vcollections,)"
}

final var expands = [
    'version': project.version,
    'modid': modid,
    'forge': project.forge_version
]

// This block of code expands all the gradle properties in the specified resource targets.
// It copies them into the targets and expands all the defined properties.
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
processResources {
    inputs.properties expands
    filesMatching(resourceTargets) {
        expand expands
    }
    exclude ".cache/cache"
}

final var actualDateTime = OffsetDateTime.now(ZoneOffset.UTC).withNano(0)
final var currentDateTime = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(actualDateTime)
def manifestAttributes = [
    "Specification-Title"     : "SectionProtection",
    "Specification-Vendor"    : "Matyrobbrt",
    "Specification-Version"   : "1",
    "Implementation-Title"    : project.name,
    "Implementation-Version"  : version,
    "Implementation-Vendor"   : "Matyrobbrt",
    "Timestamp"               : currentDateTime,
    "Git-Commit"              : versions.getCommitId(),
    "Git-Commit-Timestamp"    : versions.getCommitTimestamp(),
    "MixinConfigs"            : "${modid}.mixins.json"
] as Map

def forgeDest = project.file("$buildDir/libs/forge")

tasks.named('jarJar') {
    from sourceSets.api.output
    manifest.attributes(manifestAttributes)
    destinationDir forgeDest
    enabled = true
    classifier = ''
}

jar {
    from sourceSets.api.output
    manifest.attributes(manifestAttributes)
    destinationDir forgeDest
    classifier = 'slim'
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    destinationDir forgeDest
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
    destinationDir forgeDest
}

def apiDest = project.file("$buildDir/libs/api")

task apiJar(type: Jar, dependsOn: apiClasses) {
    it.from sourceSets.api.output
    final var attr = new HashMap<>(manifestAttributes);
    attr.remove('MixinConfigs')
    it.manifest.attributes(attr)
    destinationDirectory.set(apiDest)
}

reobf {
    apiJar {}
    jarJar {}
}
apiJar.finalizedBy 'reobfApiJar'
tasks.jarJar.finalizedBy 'reobfJarJar'

task apiSourcesJar(type: Jar, dependsOn: apiClasses) {
    archiveClassifier.set('sources')
    from sourceSets.api.allSource
    destinationDirectory.set(apiDest)
}

task apiJavadoc(type: Javadoc) {
    source = sourceSets.api.allJava
    classpath = javadoc.classpath
    destinationDir buildDir.toPath().resolve('api-javadoc').toFile()
}

task apiJavadocJar(type: Jar, dependsOn: apiJavadoc) {
    archiveClassifier.set('javadoc')
    from apiJavadoc.destinationDir
    destinationDirectory.set(apiDest)
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.matyrobbrt.mc.sectionprotection'
            artifactId = "${modid}-${mcVersion}"

            artifacts = [tasks.jarJar, javadocJar, sourcesJar]

            pom(this::configurePom)
        }
        mavenApi(MavenPublication) {
            groupId = 'com.matyrobbrt.mc.sectionprotection'
            artifactId = "${modid}-${mcVersion}-api"

            artifacts = [apiJar, apiSourcesJar, apiJavadocJar]

            pom(this::configurePom)
            pom {
                name = 'SectionProtectionAPI'
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = project.hasProperty("snapshot") ?
                    "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                    : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("ossrhUser") ? ossrhUser : ""
                password = findProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

void configurePom(MavenPom pom) {
    pom.name = "SectionProtection"
    pom.description = "A Minecraft vanilla-styled chunk claiming mod."
    pom.url = 'https://github.com/Matyrobbrt/SectionProtection'
    pom.licenses {
        license {
            name = 'MIT License'
            url = 'https://www.opensource.org/licenses/mit-license.php'
        }
    }
    pom.developers {
        developer {
            id = 'matyrobbrt'
            name = 'Matyrobbrt'
            email = 'matyrobbrt@gmail.com'
        }
    }
    pom.scm {
        connection = 'scm:git:git:github.com/matyrobbrt/curseforgejavaapi.git'
        developerConnection = 'scm:git:ssh://github.com/Matyrobbrt/SectionProtection.git'
        url = 'https://github.com/Matyrobbrt/SectionProtection'
    }
}

nexusStaging {
    serverUrl = "https://s01.oss.sonatype.org/service/local/"
    username = findProperty("ossrhUser") ? ossrhUser : ""
    password = findProperty("ossrhPassword") ? ossrhPassword : ""
}
signing {
    sign publishing.publications.maven
    sign publishing.publications.mavenApi
}

if (project.hasProperty("close")) {
    // tasks.publish.finalizedBy closeAndReleaseRepository
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    it.apiToken = findProperty('curseforgeKey')
    it.group = 'publishing'

    var projectId = findProperty('curseforge_project')
    var mainFile = it.upload(projectId, tasks.jarJar)
    mainFile.changelog = file('changelog.txt')
    mainFile.releaseType = findProperty('release_type')
    dependsOn(jar)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
